Request(요청)/Response(응답)
  GET 방식 : 주소창에 직접 원하는 데이터를 적거나 링크 클릭해서 호출 (필요한 데이터를 '?'와 '&,='를 이용해서 단순 링크 처리) -> 특정 정보 조회
  POST 방식 : 입력 화면에서 필요한 내용을 작성 후 '전송'과 같은 버튼을 클릭해서 호출 (주소와 데이터를 따로 보냄, 보통 회원가입이나 로그인처리) -> 실제 처리가 필요한 작업
  Requset : 서버에 데이터를 요구 
  Response : 데이터를 만들어서 브라우저로 전송
    정적(static) 데이터 : 항상 동일한 데이터 전송하는 방식 (주로 파일로 고정된 HTML,CSS,이미지파일) -> 웹서버
    동적(dynamic) 데이터 : 필요할 때마다 다른 데이터를 동적으로 구성 (메일함 처럼 상황에 따라 동적으로 서버에서 데이터를 만들어 보내는 방식) -> WAS(웹 어플리케이션 서버)

HTTP 
   protocol(프로토콜) : 브라우저의 요청과 서버의 응답사이의 데이터 교환 약속 -> 웹에서는 HTTP(Hyper Text Transfer Protocol)
   메세지 : 헤더(Header)와 Body로 구성 -> 요청과 응답이 하나의 쌍으로 묶여서 처리
   비연결성(Connectionless) : 하나의 요청과 응답을 처리한 후 연결 종료 (적은 리소스를 이용해서 많은 수의 요청을 처리)

자바 서버 사이드 프로그래밍
    JavaEE : Servlet, JSP 포함 하는 기술 스펙 (서블릿:코드를 이용한 처리 , JSP : 화면개발)
    (Browser --Request--> Servlet클래스 , JSP파일 --Response--> Browser)
      
      서블릿(Servlet) : 서버에서 동적으로 요청과 응답을 처리할 수 있는 API를 정의 (자바코드를 이용해서 HTML문자열을 만들어냄) 
      서블릿 컨테이너(Servlet Container) : 서블릿을 실행할 수 있는 환경
        - 객체를 생성하거나 호출하는 주체
        - 서블릿 클래스에서 생성하는 객체의 관리
        - 서블릿/JSP의 코드 개발은 자바API와 더불어 서블릿API도 같이 사용
        - init(), doGet(),destroy() : 서블릿 라이프 사이클(life cycle)
      
      JSP(Java Server Page) : 동적으로 데이터를 구성하는 기술 (HTML코드를 그대로 이용,약간의 자바코드)
        - JSP파일은 필요한 순간에 서블릿 코드로 변환되어 컴파일 후 실행
        - GET : 입력과 조회 -> 호출 경로는 주소창에 바로 입력, 링크를 통해 접근 (원하는 데이터 조회, 사용자가 입력할 수있는 화면)
          - <form> : 입력양식 (사용자가 입력하는 내용들을 전송하는 용도)
          - <input> : 문자나 숫자등을 입력하는 용도 (type 속성을 이용해 숫자,문자,시간등을 입력)
          - <button> : <form>의 전송을 목적으로 하는경우에 type='submit' 지정
            - <form> 태그 내에서 사용자가 입력한 값을 <input> 태그의 name 속성값과 함께 전송 
          - 쿼리스트링(query string) : 웹 주소창 뒤에 '?'로 시작하는 내용물 (무언가를 요구하거나 물어보는 용도로 데이터 전달)
          - 파라미터(parameter) : '키=값'의 형태(파라미터(parameter)이름과 값)
        - POST : 등록/수정/삭제 -> <form> 태그의 action과 method 속성을 이용하여 전송 (양식을 어디에 어떤 방법으로 전송할지 결정)
            - URL 전달후 HTTP Body로 쿼리 스트링
            - 많은 양의 데이터 전송
        '${ }' : 서버에 데이터를 출력 -> System.out.prinln()과 유사한 용도 (param이라는 객체를 이용해서 전달된 파라미터 추출)
        웹의 파라미터는 모두 문자열 : jsp에서 Integer.pasrseInt() 를 적용하여 수식함수 이용
          !! JSP에서 쿼리 스트링이나 파리미터를 처리하지 않음 -> JSP대신에 서블릿을 통해서 처리
          !! JSP는 입력화면을 구성하거나 처리 결과를 보여주는 용도로만 사용
          !! 브라우저는 직접 JSP 경로를 호출하지 않고 서블릿의 경로를 통해서 JSP를 보는 방식으로 사용
            
