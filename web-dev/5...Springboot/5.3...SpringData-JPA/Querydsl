빌드 그래들

buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'org.zerock'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-validation'


    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"


    annotationProcessor(
            "jakarta.persistence:jakarta.persistence-api",
            "jakarta.annotation:jakarta.annotation-api",
            "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta")

    implementation 'org.modelmapper:modelmapper:3.1.0'

    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.1.0'

    implementation 'org.springframework.boot:spring-boot-starter-validation'

}

tasks.named('test') {
    useJUnitPlatform()
}

sourceSets {

    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
        }
    }
}


compileJava.dependsOn('clean')

=============== repository ->search->BoardSearch

public interface BoardSearch {
    
    Page<Board> search1(Pageable pageable);
}

===========BoardSearchImpl
    public class BoardSearchImpl extends QuerydslRepositorySupport implements BoardSearch {
    public BoardSearchImpl(){
        super(Board.class);
    }
    
    @Override
    public Page<Board> search1(Pageable pageable){
        return null;
    }
}
==================BoardRepository
public interface BoardRepository extends JpaRepository<Board, Long>, BoardSearch {
    @Query(value ="select now()", nativeQuery = true)
    String getTime();
}

=============BoardSearchImpl
public class BoardSearchImpl extends QuerydslRepositorySupport implements BoardSearch {
    public BoardSearchImpl(){
        super(Board.class);
    }

    @Override
    public Page<Board> search1(Pageable pageable){

        QBoard board =QBoard.board; //Q도메인객체

        JPQLQuery<Board> query = from(board); // select.. from board

        query.where(board.title.contains("1")); //where title like...
        
        List<Board> List = query.fetch();
        
        long count = query.fetchCount();

        return null;
    }
}

========테스트
    @Test
    public void testSearch1(){
        //2 page order by bno desc
        Pageable pageable = PageRequest.of(1,10,Sort.by("bno").descending());

        boardRepository.search1(pageable);
    }
==========BoardSearchImpl
    @Override
    public Page<Board> search1(Pageable pageable){

        QBoard board =QBoard.board; //Q도메인객체

        JPQLQuery<Board> query = from(board); // select.. from board

        query.where(board.title.contains("1")); //where title like...
        //paging
        this.getQuerydsl().applyPagination(pageable, query);

        List<Board> list = query.fetch();

        long count = query.fetchCount();

        return null;
    }

===Impl
public class BoardSearchImpl extends QuerydslRepositorySupport implements BoardSearch {
    public BoardSearchImpl(){
        super(Board.class);
    }

    @Override
    public Page<Board> search1(Pageable pageable){

        QBoard board =QBoard.board; //Q도메인객체

        JPQLQuery<Board> query = from(board); // select.. from board

        BooleanBuilder booleanBuilder = new BooleanBuilder();// (
        booleanBuilder.or(board.title.contains("11")); //title like...
        booleanBuilder.or(board.content.contains("11")); //content like..
        query.where(booleanBuilder);
        query.where(board.bno.gt(0L));

//        query.where(board.title.contains("1")); //where title like...
        //paging
        this.getQuerydsl().applyPagination(pageable, query);

        List<Board> list = query.fetch();

        long count = query.fetchCount();

        return null;
    }
}
================ BoardSearch
    //검색
    Page<Board> searchAll(String[] types, String keyword, Pageable pageable);
============IMPL 
    @Override
    public Page<Board> searchAll(String[] types, String keyword, Pageable pageable) {

        QBoard board =QBoard.board;
        JPQLQuery<Board> query =from(board);

        if( (types !=null && types.length > 0) && keyword != null){ //검색조건과 키워드가 있다면
            BooleanBuilder booleanBuilder =new BooleanBuilder(); // (
            for(String type: types){
                switch (type){
                    case "t":
                        booleanBuilder.or(board.title.contains(keyword));
                        break;
                    case "c":
                        booleanBuilder.or(board.content.contains(keyword));
                        break;
                    case "w":
                        booleanBuilder.or(board.writer.contains(keyword));
                        break;
                }
            }//end for
            query.where(booleanBuilder);
        }// end if

        //bno > 0
        query.where(board.bno.gt(0L));

        //paging
        this.getQuerydsl().applyPagination(pageable, query);

        List<Board> list = query.fetch();

        long count = query.fetchCount();

        return null;
    }

===========테스트코드
    @Test
    public void testSearchAll(){
        String[] types = {"t","c","w"};
        String keyword ="1";

        Pageable pageable = PageRequest.of(0,10, Sort.by("bno").descending());

        Page<Board> result = boardRepository.searchAll(types, keyword, pageable);
    }
=========Pate<T> 반환 -> list<T> : 실제목록 데이터 , Pageable : 페이지 관련 정보를 가진 객체 , long : 전체개수
Impl
        @Override
    public Page<Board> searchAll(String[] types, String keyword, Pageable pageable) {

        QBoard board =QBoard.board;
        JPQLQuery<Board> query =from(board);

        if( (types !=null && types.length > 0) && keyword != null){ //검색조건과 키워드가 있다면
            BooleanBuilder booleanBuilder =new BooleanBuilder(); // (
            for(String type: types){
                switch (type){
                    case "t":
                        booleanBuilder.or(board.title.contains(keyword));
                        break;
                    case "c":
                        booleanBuilder.or(board.content.contains(keyword));
                        break;
                    case "w":
                        booleanBuilder.or(board.writer.contains(keyword));
                        break;
                }
            }//end for
            query.where(booleanBuilder);
        }// end if

        //bno > 0
        query.where(board.bno.gt(0L));

        //paging
        this.getQuerydsl().applyPagination(pageable, query);

        List<Board> list = query.fetch();

        long count = query.fetchCount();

        return new PageImpl<>(list, pageable, count);
    }

======테스트코드
    @Test
    public void testSearchAll(){
        String[] types = {"t","c","w"};
        String keyword ="1";

        Pageable pageable = PageRequest.of(0,10, Sort.by("bno").descending());

        Page<Board> result = boardRepository.searchAll(types, keyword, pageable);

        //total pages
        log.info(result.getTotalPages());

        //pag size
        log.info(result.getSize());

        //pageNumber
        log.info(result.getNumber());

        //prev next
        log.info(result.hasPrevious() + ": " + result.hasNext());
        
        result.getContent().forEach(board -> log.info(board));
    }
